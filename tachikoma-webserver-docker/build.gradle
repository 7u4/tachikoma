apply plugin: 'base'
apply plugin: 'docker'

configurations {
    binaries
}

dependencies {
    binaries project(path: ":tachikoma-webserver", configuration: 'archives')
}

def tiniBinary = new File(project.buildDir, "tini")

task downloadTini {
    def tiniUrl = new URL('https://github.com/krallin/tini/releases/download/v0.16.1/tini-static-amd64')
    def tiniChecksum = "d1cb5d71adc01d47e302ea439d70c79bd0864288"

    project.buildDir.mkdirs()
    if (!tiniBinary.exists()) {
        tiniUrl.withInputStream{ i -> tiniBinary.withOutputStream{ it << i }}
    }

    def calculatedChecksum = java.security.MessageDigest.getInstance("SHA1").digest(tiniBinary.bytes).encodeHex().toString()
    if (calculatedChecksum != tiniChecksum) {
        throw new RuntimeException("Failed to download valid tini. Please remove ${tiniBinary} and try again $tiniChecksum != $calculatedChecksum")
    }
}

task webserverDocker([type: Docker, dependsOn: configurations.binaries]) {
    applicationName = 'tachikoma-webserver'

    baseImage 'ubuntu:xenial'

    maintainer 'tachikoma@sourceforgery.com'

    setEnvironment('DEBIAN_FRONTEND', 'noninteractive')

    runCommand('apt-get update && apt-get -y --no-install-recommends install less nvi openjdk-8-jdk-headless && apt-get clean && rm -rf /var/lib/apt/lists/*')

    addFile(tiniBinary)

    runCommand('chmod a+rx /tini')

    addFile {
        configurations.binaries.filter {
            it.path.endsWith(".tar")
        }
        .each {
            from(tarTree(it))
            includeEmptyDirs = false
            eachFile { FileCopyDetails fileCopyDetails ->
                fileCopyDetails.path = fileCopyDetails.path.replaceAll("^[^/]*", "/opt/tachikoma-webserver")
            }
        }
    }

    runCommand("chmod a+x /opt/tachikoma-webserver/bin/tachikoma-webserver")

    runCommand("useradd webserver && mkdir -p /var/log/tachikoma && chown webserver:root /var/log/tachikoma")

    entryPoint(['/tini', '--'])

    defaultCommand(["/opt/tachikoma-webserver/bin/tachikoma-webserver"])
}

assemble.dependsOn webserverDocker
